//Creating a Redux Store
const reducer = (state = 5) => {
    return state;
  }  
  
let store = Redux.createStore(reducer);


//Getting state from Redux store
const store = Redux.createStore(
    (state = 5) => state
  );
  
let currentState = store.getState();


//Defining a Redux action
//All state updates triggered by dispatching actions
//Action is a JS object that contains info about an event
let action = {
    type: 'LOGIN'
}


//After creating an action, send to Redux store so it can update state.
//In Redux, define action creators to accomplish this. A JS function that returns an action.
const action = {
    type: 'LOGIN'
  }

function actionCreator() {
    return action;
}


//store.dispatch() dispatches action to the Redux store
const store = Redux.createStore(
    (state = {login: false}) => state
  );
  
const loginAction = () => {
return {
    type: 'LOGIN'
}
};
  
store.dispatch(loginAction());


//REDUCER FUNCTION
//After an action is created and dispatched, need to know how to respond
//Reducers responsible for state modification. Takes state and action as arguments, and returns new state
//State us read-only in Redux, so reducer must always return new COPY of state.
const defaultState = {
login: false
};

const reducer = (state = defaultState, action) => {  
if (action.type == 'LOGIN') {
    return {login: true}
} else {
    return state
}
};

const store = Redux.createStore(reducer);

const loginAction = () => {
return {
    type: 'LOGIN'
}
};


//Using a switch statement to handle multiple actions
const defaultState = {
    authenticated: false
  };
  
  const authReducer = (state = defaultState, action) => {  
    switch (action.type) {
      case 'LOGIN':
        return {authenticated: true};
      case 'LOGOUT':
        return {authenticated: false};
      default:
        return state;
    }   
  };
  
  const store = Redux.createStore(authReducer);
  
  const loginUser = () => {
    return {
      type: 'LOGIN'
    }
  };
  
  const logoutUser = () => {
    return {
      type: 'LOGOUT'
    }
  };


//A common practice when working with Redux is to assign action types as read-only constants, then reference these constants wherever they are used. 
//Refactor of above code to reference constants instead of strings
const LOGIN = 'LOGIN';
const LOGOUT = 'LOGOUT';

const defaultState = {
  authenticated: false
};

const authReducer = (state = defaultState, action) => {

  switch (action.type) {

    case LOGIN:
      return {
        authenticated: true
      }

    case LOGOUT:
      return {
        authenticated: false
      }

    default:
      return state;

  }

};

const store = Redux.createStore(authReducer);

const loginUser = () => {
  return {
    type: LOGIN
  }
};

const logoutUser = () => {
  return {
    type: LOGOUT
  }
};


//Registerring a store listener
//store.subscribe() - subscribe listener functions to the store which are called whenever an action is dispatched
const ADD = 'ADD';

const reducer = (state = 0, action) => {
  switch(action.type) {
    case ADD:
      return state + 1;
    default:
      return state;
  }
};

const store = Redux.createStore(reducer);

let count = 0;

store.subscribe(() => count++) //increments count every time store.dispatched()

store.dispatch({type: ADD});
console.log(count);
store.dispatch({type: ADD});
console.log(count);
store.dispatch({type: ADD});
console.log(count);


//Combining multiple reducers - combineReducers()
//Needed to keep state in a single place
//Create multiple reducers to handle difference pieces of application, then compose into one root reducer
//Accepts an object as an argument in which you define props which associate keys to reducer functions
//Good practice to create a reducer for each piece of application state when they are distinct or unique
const rootReducer = Redux.combineReducers({
    auth: authenticationReducer,
    notes: notesReducer
});

//Example
const INCREMENT = 'INCREMENT';
const DECREMENT = 'DECREMENT';

const counterReducer = (state = 0, action) => {
  switch(action.type) {
    case INCREMENT:
      return state + 1;
    case DECREMENT:
      return state - 1;
    default:
      return state;
  }
};

const LOGIN = 'LOGIN';
const LOGOUT = 'LOGOUT';

const authReducer = (state = {authenticated: false}, action) => {
  switch(action.type) {
    case LOGIN:
      return {
        authenticated: true
      }
    case LOGOUT:
      return {
        authenticated: false
      }
    default:
      return state;
  }
};

const rootReducer = Redux.combineReducers({
  auth: authReducer,
  count: counterReducer
});

const store = Redux.createStore(rootReducer);


//Sending action data to the store
const ADD_NOTE = 'ADD_NOTE';

const notesReducer = (state = 'Initial State', action) => {
  switch(action.type) {    
    case ADD_NOTE:
      return action.text;    
    default:
      return state;
  }
};

const addNoteText = (note) => {  
  return {
    type: ADD_NOTE,
    text: note
  }  
};

const store = Redux.createStore(notesReducer);

console.log(store.getState());
store.dispatch(addNoteText('Hello!'));
console.log(store.getState());


//Redux Thunk Middlewear
//Used to call async endpoints in Redux
//Simulated a-sync example
const REQUESTING_DATA = 'REQUESTING_DATA'
const RECEIVED_DATA = 'RECEIVED_DATA'

const requestingData = () => { return {type: REQUESTING_DATA} }
const receivedData = (data) => { return {type: RECEIVED_DATA, users: data.users} }

const handleAsync = () => {
  return function(dispatch) {    
    store.dispatch(requestingData());

    setTimeout(function() {
      let data = {
        users: ['Jeff', 'William', 'Alice']
      }      
      store.dispatch(receivedData(data));
    }, 2500);
  }
};

const defaultState = {
  fetching: false,
  users: []
};

const asyncDataReducer = (state = defaultState, action) => {
  switch(action.type) {
    case REQUESTING_DATA:
      return {
        fetching: true,
        users: []
      }
    case RECEIVED_DATA:
      return {
        fetching: false,
        users: action.users
      }
    default:
      return state;
  }
};

const store = Redux.createStore(
  asyncDataReducer,
  Redux.applyMiddleware(ReduxThunk.default)
);


//Sample Counter app with Redux
const INCREMENT = 'INCREMENT'; 
const DECREMENT = 'DECREMENT';

const counterReducer = (state = 0, action) => {
    switch (action.type) {
        case INCREMENT:
            return state + 1
        case DECREMENT:
            return state - 1
        default:
            return state;
    }
}

const incAction = () => {
    return {
        type: INCREMENT
    }
}

const decAction = () => {
    return {
        type: DECREMENT
    }
}

const store = Redux.createStore(counterReducer)


//Immutable state example
// A list of strings representing tasks to do:
const todos = [
  'Go to the store',
  'Clean the house',
  'Cook dinner',
  'Learn to code',
];

const ADD_TO_DO = 'ADD_TO_DO';

const immutableReducer = (state = todos, action) => {
  switch(action.type) {
    case ADD_TO_DO:      
      return [...todos, action.todo]   
    default:
      return state;
  }
};

const addToDo = (todo) => {
  return {
    type: ADD_TO_DO,
    todo
  }
};

const store = Redux.createStore(immutableReducer);


//Another example of immutable state
const immutableReducer = (state = [0,1,2,3,4,5], action) => {
  switch(action.type) {
    case 'REMOVE_ITEM':      
      return state.slice(0, action.index).concat(state.slice(action.index+1))
    default:
      return state;
  }
};

const removeItem = (index) => {
  return {
    type: 'REMOVE_ITEM',
    index
  }
}

const store = Redux.createStore(immutableReducer);


//Immutable objects - use Object.assign(target, sorce1, source2, etc.)
const defaultState = {
  user: "CamperBot",
  status: "offline",
  friends: "732,982",
  community: "someWhere"
};

const immutableReducer = (state = defaultState, action) => {
  switch (action.type) {
    case "ONLINE":
      // to enforce state immutability, return a new state object using Object.assign() method
      return Object.assign({}, state, { status: "online" });
    default:
      return state;
  }
};

const wakeUp = () => {
  return {
    type: "ONLINE"
  };
};

const store = Redux.createStore(immutableReducer);
