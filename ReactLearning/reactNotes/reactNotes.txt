//STATE EXAMPLE #1
//Basic example of setting state, binding methods, and manipulating state
class Counter extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      count: 0
    };
    
    //Need to bind all methods to the object for callback to work properly
    this.increment = this.increment.bind(this);
    this.decrement = this.decrement.bind(this);
    this.reset = this.reset.bind(this);
  }
  
  //Always use setState when changing state values. Need () around the return object.
  increment() {
    this.setState(state => ({
      count: state.count + 1
    }))
  }

  decrement() {
    this.setState(state => ({
      count: state.count - 1
    }))
  }  

  reset() {
    this.setState(state => ({
      count: 0
    }))
  }

  render() {
    return (
      <div>
        <button className='inc' onClick={this.increment}>Increment!</button>
        <button className='dec' onClick={this.decrement}>Decrement!</button>
        <button className='reset' onClick={this.reset}>Reset</button>
        <h1>Current Count: {this.state.count}</h1>
      </div>
    );
  }
};


//CONTROLLED INPUT
class MyForm extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: '',
      submit: ''
    };
    this.handleChange = this.handleChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
  }

  handleChange(event) {
    this.setState({
      input: event.target.value
    });
  }

  handleSubmit(event) {   
    event.preventDefault()
    this.setState({
      submit: this.state.input
    })    
  }

  render() {
    return (
      <div>
        <form onSubmit={this.handleSubmit}>          
          <input type='text' value={this.state.input} onChange={this.handleChange}/>          
          <button type='submit'>Submit!</button>
        </form>        
        <h1>{this.state.submit}</h1>        
      </div>
    );
  }
};


//Passing props between components
class MyApp extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: 'Don'
    }
  }
  render() {
    return (
       <div>
         <Navbar name={this.state.name} />
       </div>
    );
  }
};

class Navbar extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
    <div>
      <h1>Hello, my name is: {this.props.name} </h1>
    </div>
    );
  }
};


//PASSING A CALLBACK FUNCTION
//Also, passing state between parent stateful function and children stateless
class MyApp extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      inputValue: ''
    }
    this.handleChange = this.handleChange.bind(this);
  }

  handleChange(event) {
    this.setState({
      inputValue: event.target.value
    });
  }

  render() {
    return (
       <div>        
        <GetInput input={this.state.inputValue} handleChange={this.handleChange} />
        <RenderInput input={this.state.inputValue}/>        
       </div>
    );
  }
};


class GetInput extends React.Component {
  constructor(props) {
    super(props);
  }

  render() {
    return (
      <div>
        <h3>Get Input:</h3>
        <input
          value={this.props.input}
          onChange={this.props.handleChange}/>
      </div>
    );
  }
};


class RenderInput extends React.Component {
  constructor(props) {
    super(props);
  }

  render() {
    return (
      <div>
        <h3>Input Render:</h3>
        <p>{this.props.input}</p>
      </div>
    );
  }
};


//SIMULATED API CALL
//Illustrates componentDidMount method, which runs every time it's rendered to the DOM
//Also best place to attach any event listeners needed
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      activeUsers: null
    };
  }

  componentDidMount() {
    setTimeout( () => {
      this.setState({
        activeUsers: 1273
      });
    }, 2500);
  }
  
  render() {
    return (
      <div>
        <h1>Active Users: {this.state.activeUsers}</h1>
      </div> 
    );
  }
};


//Another lifecycle example. Adding an event listener, then removing before the component is destroyed
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      message: ''
    };
    this.handleEnter = this.handleEnter.bind(this);
    this.handleKeyPress = this.handleKeyPress.bind(this);
  }
  
  componentDidMount() {
    document.addEventListener("keydown", this.handleKeyPress); 
  }

  componentWillUnmount() {
    document.removeEventListener("keydown", this.handleKeyPress); 
  }
  
  handleEnter() {
    this.setState({
      message: this.state.message + 'You pressed the enter key! '
    });
  }

  handleKeyPress(event) {
    if (event.keyCode === 13) {
      this.handleEnter();
    }
  }

  render() {
    return (
      <div>
        <h1>{this.state.message}</h1>
      </div>
    );
  }
};


//Optimizing re-renders with shouldComponentUpdate method
//Returns true / false determining whether DOM should updated based on nextProps and nextState
class OnlyEvens extends React.Component {
  constructor(props) {
    super(props);
  }

  shouldComponentUpdate(nextProps, nextState) {
    console.log('Should I update?');
     
    if (nextProps.value % 2 == 0) {
      return true;
    } else {
      return false;
    }    
  }

  componentDidUpdate() {
    console.log('Component re-rendered.');
  }

  render() {
    return <h1>{this.props.value}</h1>
  }
};


class Controller extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value: 0
    };
    this.addValue = this.addValue.bind(this);
  }

  addValue() {
    this.setState({
      value: this.state.value + 1
    });
  }

  render() {
    return (
      <div>
        <button onClick={this.addValue}>Add</button>
        <OnlyEvens value={this.state.value}/>
      </div>
    );
  }
};


//Inline Styles with React
//For assigning classes, can use className=""
//For inline, must set equal to JavaScript object and camelCase everything
class Colorful extends React.Component {
  render() {
    return (
      <div style={{color:"red", fontSize:"72px"}}>Big Red</div>
    );
  }
};


//Another example, this time assigning to a variable first
const styles = {color:"purple", fontSize:40, border:"2px solid purple"};

class Colorful extends React.Component {
  render() {    
    return (
      <div style={styles}>Style Me!</div>
    );    
  }
};


//IF-ELSE in the render method
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      display: true
    }
    this.toggleDisplay = this.toggleDisplay.bind(this);
  }

  toggleDisplay() {
    this.setState({
      display: !this.state.display
    });
  }

  render() {
    if (this.state.display) {
      return (
        <div>
          <button onClick={this.toggleDisplay}>Toggle Display</button>
          <h1>Displayed!</h1>
        </div>
    );
  } else {
      return (
        <div>
          <button onClick={this.toggleDisplay}>Toggle Display</button>         
        </div>
      );
  }}
};


//Use && as conditional. 
//{condition && <p> Return markup if true </p>}
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      display: true
    }
    this.toggleDisplay = this.toggleDisplay.bind(this);
  }
  
  toggleDisplay() {
    this.setState(state => ({
      display: !state.display
    }));
  }

  render() {    
    return (
       <div>
         <button onClick={this.toggleDisplay}>Toggle Display</button>
          {this.state.display && <h1>Displayed!</h1>}       
        </div>
    );
  }
};


//Using a ternary operator to determine functionality
const inputStyle = {
  width: 235,
  margin: 5
}

class CheckUserAge extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      userAge: '',
      input: ''
    }
    this.submit = this.submit.bind(this);
    this.handleChange = this.handleChange.bind(this);
  }

  handleChange(e) {
    this.setState({
      input: e.target.value,
      userAge: ''
    });
  }

  submit() {
    this.setState(state => ({
      userAge: state.input
    }));
  }

  render() {
    const buttonOne = <button onClick={this.submit}>Submit</button>;
    const buttonTwo = <button>You May Enter</button>;
    const buttonThree = <button>You Shall Not Pass</button>;
    return (
      <div>
        <h3>Enter Your Age to Continue</h3>
        <input
          style={inputStyle}
          type="number"
          value={this.state.input}
          onChange={this.handleChange} /><br />
          {
          this.state.userAge === ''
            ? buttonOne
            : this.state.userAge >= 18
              ? buttonTwo
              : buttonThree
          }
      </div>
    );
  }
};


//Game of Chance
//Render conditionally from props
class Results extends React.Component {
  constructor(props) {
    super(props);
  }

  render() {
    return (
      <h1>
      {this.props.fiftyFifty == true ? "You Win!" : "You Lose!"}
      </h1>
    )
  };
};


class GameOfChance extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      counter: 1
    }
    this.handleClick = this.handleClick.bind(this);
  }

  handleClick() {
    this.setState({
      counter: this.state.counter + 1
    });
  }

  render() {
    const expression = Math.random() >= 0.5;

    return (
      <div>
        <button onClick={this.handleClick}>Play Again</button> 
        <Results fiftyFifty={expression} />        
        <p>{'Turn: ' + this.state.counter}</p>
      </div>
    );
  }
};


//Changing inline CSS conditionally based on component state
class GateKeeper extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: ''
    };
    this.handleChange = this.handleChange.bind(this);
  }

  handleChange(event) {
    this.setState({ input: event.target.value })
  }

  render() {
    let inputStyle = {
      border: '1px solid black'
    };    
    
    this.state.input.length > 15 
      ? inputStyle.border = '3px solid red'
      : inputStyle.border = '1px solid black'
    
    
    return (
      <div>
        <h3>Don't Type Too Much:</h3>
        <input
          type="text"
          style={inputStyle}
          value={this.state.input}
          onChange={this.handleChange} />
      </div>
    );
  }
};


//ToDo List
//Map over input to dynamically render elements
const textAreaStyles = {
  width: 235,
  margin: 5
};

class MyToDoList extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      userInput: '',
      toDoList: []
    }

    this.handleSubmit = this.handleSubmit.bind(this);
    this.handleChange = this.handleChange.bind(this);
  }

  handleSubmit() {
    const itemsArray = this.state.userInput.split(',');
    this.setState({
      toDoList: itemsArray
    });
  }

  handleChange(e) {
    this.setState({
      userInput: e.target.value
    });
  }

  render() {
    const items = this.state.toDoList.map(i => <li>{i}</li>);
    return (
      <div>
        <textarea
          onChange={this.handleChange}
          value={this.state.userInput}
          style={textAreaStyles}
          placeholder="Separate Items With Commas" /><br />
        <button onClick={this.handleSubmit}>Create List</button>
        <h1>My "To Do" List:</h1>
        <ul>
          {items}
        </ul>
      </div>
    );
  }
};


//Expanding on the above, need to add IDs when creating array of elements
//Allows React to only re-render changed or removed items instead of all
//Only need to be unique between sibling elements, not global
const frontEndFrameworks = [
  'React',
  'Angular',
  'Ember',
  'Knockout',
  'Backbone',
  'Vue'
];

function Frameworks() {
  const renderFrameworks = frontEndFrameworks.map((item) =>
  <li key={item+1}>{item}</li>);

  return (
    <div>
      <h1>Popular Front End JavaScript Frameworks</h1>
      <ul>
        {renderFrameworks}
      </ul>
    </div>
  );
};


//Using Array.filter() to dynamically filter an array
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      users: [
        {
          username: 'Jeff',
          online: true
        },
        {
          username: 'Alan',
          online: false
        },
        {
          username: 'Mary',
          online: true
        },
        {
          username: 'Jim',
          online: false
        },
        {
          username: 'Sara',
          online: true
        },
        {
          username: 'Laura',
          online: true
        } 
      ]
    }
  }
  render() {
    const usersOnline = this.state.users.filter(user => user.online);
    const renderOnline = usersOnline.map( (user) => <li key={user.username + 1}>{user.username}</li>);

    return (
       <div>
         <h1>Current Online Users:</h1>
         <ul>
           {renderOnline}
         </ul>
       </div>
    );
  }
};


//Rendering React on the server with renderToString
//React apps would consist of a relatively empty HTML file and a large bundle of JavaScript when it's initially loaded to the browser. 
//This may not be ideal for search engines that are trying to index the content of your pages so people can find you. 
//If you render the initial HTML markup on the server and send this to the client, the initial page load contains all of the page's markup which can be crawled by search engines. 
//Second, this creates a faster initial page load experience because the rendered HTML is smaller than the JavaScript code of the entire app. 
//React will still be able to recognize your app and manage it after the initial load.
class App extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return <div/>
  }
};

ReactDOMServer.renderToString(<App />)



