//Creating a Redux Store
const reducer = (state = 5) => {
    return state;
  }  
  
let store = Redux.createStore(reducer);


//Getting state from Redux store
const store = Redux.createStore(
    (state = 5) => state
  );
  
let currentState = store.getState();


//Defining a Redux action
//All state updates triggered by dispatching actions
//Action is a JS object that contains info about an event
let action = {
    type: 'LOGIN'
}


//After creating an action, send to Redux store so it can update state.
//In Redux, define action creators to accomplish this. A JS function that returns an action.
const action = {
    type: 'LOGIN'
  }

function actionCreator() {
    return action;
}


//store.dispatch() dispatches action to the Redux store
const store = Redux.createStore(
    (state = {login: false}) => state
  );
  
const loginAction = () => {
return {
    type: 'LOGIN'
}
};
  
store.dispatch(loginAction());


//REDUCER FUNCTION
//After an action is created and dispatched, need to know how to respond
//Reducers responsible for state modification. Takes state and action as arguments, and returns new state
//State us read-only in Redux, so reducer must always return new COPY of state.
const defaultState = {
login: false
};

const reducer = (state = defaultState, action) => {  
if (action.type == 'LOGIN') {
    return {login: true}
} else {
    return state
}
};

const store = Redux.createStore(reducer);

const loginAction = () => {
return {
    type: 'LOGIN'
}
};


//Using a switch statement to handle multiple actions
const defaultState = {
    authenticated: false
  };
  
  const authReducer = (state = defaultState, action) => {  
    switch (action.type) {
      case 'LOGIN':
        return {authenticated: true};
      case 'LOGOUT':
        return {authenticated: false};
      default:
        return state;
    }   
  };
  
  const store = Redux.createStore(authReducer);
  
  const loginUser = () => {
    return {
      type: 'LOGIN'
    }
  };
  
  const logoutUser = () => {
    return {
      type: 'LOGOUT'
    }
  };


//